//字符串有三种编辑操作:插入一个字符、删除一个字符或者替换一个字符。 给定两个字符串，编写一个函数判定它们是否只需要一次(或者零次)编辑。
//依然是求出两个字符串的最短编辑长度
class Solution {
public:
    int get_min(int a,int b,int c){
        int ans=a;
        if(ans>b) ans=b;
        if(ans>c) ans=c;
        return ans;
    }
    int minDistance(string word1, string word2) {
        int m=word1.size();
        int n=word2.size();
        if(word1.empty()&&word2.empty()) return 0;
        if(word1.empty()) return n;
        if(word2.empty()) return m;
        if(word1==word2) return 0;
        int **dist=new int*[m+1];
        for(int i=0;i<m+1;i++){
            dist[i]=new int[n+1];
        }
        for(int i=0;i<=m;i++){
            for(int j=0;j<=n;j++){
                dist[i][j]=0;
            }
        }
        for(int i=0;i<=m;i++){
            dist[i][0]=i;
        }
        for(int j=0;j<=n;j++){
            dist[0][j]=j;
        }
        for(int i=1;i<=m;i++){
            for(int j=1;j<=n;j++){
                if(word1[i-1]==word2[j-1]){
                    dist[i][j]=dist[i-1][j-1];
                }
                else{
                    dist[i][j]=get_min(dist[i-1][j-1],dist[i][j-1],dist[i-1][j])+1;
                }
            }
        }
        return dist[m][n];
    }
};
